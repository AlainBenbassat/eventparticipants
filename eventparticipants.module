<?php

function eventparticipants_menu() {
  $items = [];

  $items['eventparticipants'] = [
    'title' => 'Deelnemerslijst',
    'page callback' => 'eventparticipants_page',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];

  return $items;
}

function eventparticipants_page() {
  $urlParams = drupal_get_query_parameters();
  $eventID = isset($urlParams['id']) ? (int)$urlParams['id'] : 0;

  // initialize civicrm
  civicrm_initialize();

  // get language strings
  $langString = eventparticipants_getStrings();

  // get the event
  $event = eventparticipants_getEventDetails($eventID);

  // make sure we find the event
  if ($event === FALSE) {
    drupal_set_message($langString['no_event'], 'error');
    drupal_goto("/", []);
    return;
  }

  // set the title of the page (= event title)
  drupal_set_title($event['title']);
  $html = '<h2>' . $langString['participant_list'] . '</h2>';

  // show privacy notice
  $html .= '<p>' . $langString['privacy_notice'] . '</p>';

  // show participants
  $dao = eventparticipants_getEventParticipants($eventID);
  $html .= '<table>';
  $html .= '<tr>';
  $html .= '<th>' . $langString['initials'] . '</th>';
  $html .= '<th>' . $langString['job_title'] . '</th>';
  $html .= '<th>' . $langString['organization'] . '</th>';
  $html .= '</tr>';

  while ($dao->fetch()) {
    $html .= '<tr>';
    $html .= '<td>' . substr($dao->first_name, 0, 1) . substr($dao->last_name, 0, 1) . '</td>';
    $html .= '<td>' . $dao->job_title . '</td>';
    $html .= '<td>' . $dao->organization_name . '</td>';
    $html .= '</tr>';
  }
  $html .= '</table>';

  return $html;
}

function eventparticipants_getEventDetails($eventID) {
  try {
    $event = civicrm_api3('event', 'getsingle', [
      'id' => $eventID,
    ]);
    return $event;
  }
  catch (Exception $e) {
    return FALSE;
  }
}

function eventparticipants_getEventParticipants($eventID) {
  $sql = "
    select
      c.first_name,
      c.last_name,
      c.job_title,
      c.organization_name
    from
      civicrm_contact c
    inner join
      civicrm_participant p on c.id = p.contact_id
    where
      p.status_id in (1,2,16)
    and
      c.is_deleted = 0
    and
      p.event_id = %1
    order by
      c.first_name
  ";
  $sqlParams = [
    1 => [$eventID, 'Integer'],
  ];
  $dao = CRM_Core_DAO::executeQuery($sql, $sqlParams);

  return $dao;
}

function eventparticipants_getStrings() {
  // get the current language
  $cmsLang = CRM_Utils_System::getUFLocale();
  if ($cmsLang != 'nl_NL' && $cmsLang != 'fr_FR' && $cmsLang != 'en_US') {
    $cmsLang = 'en_US';
  }

  $langStrings = [];

  $langStrings['nl_NL']['participant_list'] = 'Inschrijvingslijst';
  $langStrings['fr_FR']['participant_list'] = 'Liste des inscrits';
  $langStrings['en_US']['participant_list'] = 'Registrations';

  $langStrings['nl_NL']['privacy_notice'] = 'Omwille van de privacy tonen we enkel de initialen van de deelnemers.';
  $langStrings['fr_FR']['privacy_notice'] = 'Pour des raisons de confidentialit√©, nous n\'affichons que les initiales des participants.';
  $langStrings['en_US']['privacy_notice'] = 'For privacy reasons, we only show the initials of the participants.';

  $langStrings['nl_NL']['no_event'] = 'De inschrijvingslijst is niet beschikbaar.';
  $langStrings['fr_FR']['no_event'] = 'La liste des inscrits n\'est pas disponible.';
  $langStrings['en_US']['no_event'] = 'The registrations are not available.';

  $langStrings['nl_NL']['initials'] = 'Initialen';
  $langStrings['fr_FR']['initials'] = 'Initiales';
  $langStrings['en_US']['initials'] = 'Initials';

  $langStrings['nl_NL']['job_title'] = 'Functie';
  $langStrings['fr_FR']['job_title'] = 'Fonction';
  $langStrings['en_US']['job_title'] = 'Job Title';

  $langStrings['nl_NL']['organization'] = 'Organisatie';
  $langStrings['fr_FR']['organization'] = 'Organisation';
  $langStrings['en_US']['organization'] = 'Organization';


  return $langStrings[$cmsLang];
}
